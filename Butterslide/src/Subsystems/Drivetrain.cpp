// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "../Commands/Driving.h"
#include "Drivetrain.h"

#include <cmath>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::drivetrainFrontLeft;
    frontRight = RobotMap::drivetrainFrontRight;
    rearLeft = RobotMap::drivetrainRearLeft;
    rearRight = RobotMap::drivetrainRearRight;
    frontStrafe = RobotMap::drivetrainFrontStrafe;
    rearStrafe = RobotMap::drivetrainRearStrafe;
    ahrs = RobotMap::drivetrainAHRS;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
     SetDefaultCommand(new Driving());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Drivetrain::DrivingWithJoystick() {
	std::shared_ptr<Joystick> joy = Robot::oi->getDriver();
	float leftSpeed,rightSpeed,frontStrafeSpeed,rearStrafeSpeed, x,y;
	float const PI= 3.14159;
	float adjustmentAngle = PI/2;
	std::shared_ptr<Joystick> Pilot=joy;

	if (fieldOrient) {

		adjustmentAngle = ahrs->GetAngle()*PI/180+PI/2;

	}
	x=Pilot->GetMagnitude()*cos(Pilot->GetDirectionRadians()-adjustmentAngle);
	y=Pilot->GetMagnitude()*sin(Pilot->GetDirectionRadians()-adjustmentAngle);

	leftSpeed = y- joy->GetZ();
	rightSpeed = y*-1 - joy->GetZ() ;
	frontStrafeSpeed = x*-2;
	rearStrafeSpeed = x*2;
	// Strafing isn't working properly.  Needs fix around this area maybe?

	NormalizeInputs(leftSpeed, rightSpeed, frontStrafeSpeed, rearStrafeSpeed);


	if (fabs(rearStrafeSpeed) > .25 || fieldOrient) {
		//RobotMap::pneumaticsFrontStrafe->Set(DoubleSolenoid::Value::kForward);
		RobotMap::pneumaticsRearStrafe->Set(DoubleSolenoid::Value::kForward);

	}

	else {
		//RobotMap::pneumaticsFrontStrafe->Set(DoubleSolenoid::Value::kReverse);
		RobotMap::pneumaticsRearStrafe->Set(DoubleSolenoid::Value::kReverse);
	}

	if (fabs(leftSpeed) < .09) {
		leftSpeed=0;

	}
	if (fabs(rightSpeed) < .09) {
		rightSpeed=0;

	}

	SmoothMotion(frontLeft->Get(), leftSpeed, .07);
	SmoothMotion(frontRight->Get(), rightSpeed, .07);
	SmoothMotion(frontStrafe->Get(), frontStrafeSpeed, .07);
	SmoothMotion(rearStrafe->Get(), rearStrafeSpeed, .07);
	frontLeft->Set(leftSpeed);
	rearLeft->Set(leftSpeed);
	frontRight->Set(rightSpeed);
	rearRight->Set(rightSpeed);
	frontStrafe->Set(frontStrafeSpeed);
	rearStrafe->Set(rearStrafeSpeed);
	SmartDashboard::PutNumber("Front Left Speed", frontLeft->Get());
	SmartDashboard::PutBoolean("Field Orient", fieldOrient);

	SmartDashboard::PutBoolean( "IMU_Connected",        ahrs->IsConnected());
	        SmartDashboard::PutNumber(  "IMU_Yaw",              ahrs->GetYaw());
	        SmartDashboard::PutNumber(  "IMU_Pitch",            ahrs->GetPitch());
	        SmartDashboard::PutNumber(  "IMU_Roll",             ahrs->GetRoll());
	        SmartDashboard::PutNumber(  "IMU_CompassHeading",   ahrs->GetCompassHeading());
	        SmartDashboard::PutNumber(  "IMU_Update_Count",     ahrs->GetUpdateCount());
	        SmartDashboard::PutNumber(  "IMU_Byte_Count",       ahrs->GetByteCount());

	        /* These functions are compatible w/the WPI Gyro Class */
	        SmartDashboard::PutNumber(  "IMU_TotalYaw",         ahrs->GetAngle());
	        SmartDashboard::PutNumber(  "IMU_YawRateDPS",       ahrs->GetRate());

	        SmartDashboard::PutNumber(  "IMU_Accel_X",          ahrs->GetWorldLinearAccelX());
	        SmartDashboard::PutNumber(  "IMU_Accel_Y",          ahrs->GetWorldLinearAccelY());
	        SmartDashboard::PutBoolean( "IMU_IsMoving",         ahrs->IsMoving());
	        SmartDashboard::PutNumber(  "IMU_Temp_C",           ahrs->GetTempC());
	        SmartDashboard::PutBoolean( "IMU_IsCalibrating",    ahrs->IsCalibrating());

	        SmartDashboard::PutNumber(  "Velocity_X",           ahrs->GetVelocityX() );
	        SmartDashboard::PutNumber(  "Velocity_Y",           ahrs->GetVelocityY() );
	        SmartDashboard::PutNumber(  "Displacement_X",       ahrs->GetDisplacementX() );
	        SmartDashboard::PutNumber(  "Displacement_Y",       ahrs->GetDisplacementY() );

	        /* Display Raw Gyro/Accelerometer/Magnetometer Values                       */
	        /* NOTE:  These values are not normally necessary, but are made available   */
	        /* for advanced users.  Before using this data, please consider whether     */
	        /* the processed data (see above) will suit your needs.                     */

	        SmartDashboard::PutNumber(  "RawGyro_X",            ahrs->GetRawGyroX());
	        SmartDashboard::PutNumber(  "RawGyro_Y",            ahrs->GetRawGyroY());
	        SmartDashboard::PutNumber(  "RawGyro_Z",            ahrs->GetRawGyroZ());
	        SmartDashboard::PutNumber(  "RawAccel_X",           ahrs->GetRawAccelX());
	        SmartDashboard::PutNumber(  "RawAccel_Y",           ahrs->GetRawAccelY());
	        SmartDashboard::PutNumber(  "RawAccel_Z",           ahrs->GetRawAccelZ());
	        SmartDashboard::PutNumber(  "RawMag_X",             ahrs->GetRawMagX());
	        SmartDashboard::PutNumber(  "RawMag_Y",             ahrs->GetRawMagY());
	        SmartDashboard::PutNumber(  "RawMag_Z",             ahrs->GetRawMagZ());
	        SmartDashboard::PutNumber(  "IMU_Temp_C",           ahrs->GetTempC());
	        /* Omnimount Yaw Axis Information                                           */
	        /* For more info, see http://navx-mxp.kauailabs.com/installation/omnimount  */
	        AHRS::BoardYawAxis yaw_axis = ahrs->GetBoardYawAxis();
	        SmartDashboard::PutString(  "YawAxisDirection",     yaw_axis.up ? "Up" : "Down" );
	        SmartDashboard::PutNumber(  "YawAxis",              yaw_axis.board_axis );

	        /* Sensor Board Information                                                 */
	        SmartDashboard::PutString(  "FirmwareVersion",      ahrs->GetFirmwareVersion());

	        /* Quaternion Data                                                          */
	        /* Quaternions are fascinating, and are the most compact representation of  */
	        /* orientation data.  All of the Yaw, Pitch and Roll Values can be derived  */
	        /* from the Quaternions.  If interested in motion processing, knowledge of  */
	        /* Quaternions is highly recommended.                                       */
	        SmartDashboard::PutNumber(  "QuaternionW",          ahrs->GetQuaternionW());
	        SmartDashboard::PutNumber(  "QuaternionX",          ahrs->GetQuaternionX());
	        SmartDashboard::PutNumber(  "QuaternionY",          ahrs->GetQuaternionY());
	        SmartDashboard::PutNumber(  "QuaternionZ",          ahrs->GetQuaternionZ());
}
void Drivetrain::SetFieldOrient(bool value){
	fieldOrient = value;

}

bool Drivetrain::GetFieldOrient(){
	return fieldOrient;
}

float Drivetrain::SmoothMotion(float motorSpeed, float speed, float accelLim){

		float outputSpeed, accelSign, accel;
		accel = speed-motorSpeed;
		accelSign = fabs(speed-motorSpeed)/(speed-motorSpeed);

		if(fabs(accel)- accelLim > 0){
			outputSpeed = motorSpeed+accelLim*accelSign;
		}
		else{
			outputSpeed = speed;
		}
		return outputSpeed;
	}

void Drivetrain::NormalizeInputs(float& leftSpeed,float& rightSpeed,float& frontStrafeSpeed,float& rearStrafeSpeed){
	float maxSpeed;
	float signLS, signRS, signFSS, signRSS;
	signLS = leftSpeed/fabs(leftSpeed);
	signRS = rightSpeed/fabs(rightSpeed);
	signFSS = frontStrafeSpeed/fabs(frontStrafeSpeed);
	signRSS = rearStrafeSpeed/fabs(rearStrafeSpeed);

	if(fabs(leftSpeed) > 1 || fabs(rightSpeed) > 1 || fabs(frontStrafeSpeed) > 1 || fabs(rearStrafeSpeed) > 1){

		if(leftSpeed > rightSpeed && leftSpeed > frontStrafeSpeed && leftSpeed > rearStrafeSpeed){
			maxSpeed = leftSpeed;
		}
		else if(rightSpeed > frontStrafeSpeed && rightSpeed > rearStrafeSpeed){
			maxSpeed = rightSpeed;
		}
		else if(frontStrafeSpeed > rearStrafeSpeed){
			maxSpeed = frontStrafeSpeed;
		}
		else {
			maxSpeed = rearStrafeSpeed;
		}

		leftSpeed = fabs(leftSpeed/maxSpeed)*signLS;
		rightSpeed = fabs(rightSpeed/maxSpeed)*signRS;
		frontStrafeSpeed = fabs(frontStrafeSpeed/maxSpeed)*signFSS;
		rearStrafeSpeed = fabs(rearStrafeSpeed/maxSpeed)*signRSS;
	}
}

