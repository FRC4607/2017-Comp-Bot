// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "../Commands/Driving.h"
#include "Drivetrain.h"
#include "../RobotMap.h"
#include <cmath>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::drivetrainFrontLeft;
    frontRight = RobotMap::drivetrainFrontRight;
    rearLeft = RobotMap::drivetrainRearLeft;
    rearRight = RobotMap::drivetrainRearRight;
    frontStrafe = RobotMap::drivetrainFrontStrafe;
    rearStrafe = RobotMap::drivetrainRearStrafe;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
     SetDefaultCommand(new Driving());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Drivetrain::DrivingWithJoystick() {
	std::shared_ptr<Joystick> joy = Robot::oi->getDriver();
	float leftSpeed,rightSpeed,frontStrafeSpeed,rearStrafeSpeed;

	leftSpeed = joy->GetY()- joy->GetZ();
	rightSpeed = joy->GetY()*-1 - joy->GetZ() ;
	frontStrafeSpeed = joy->GetX()*-1-joy->GetZ();
	rearStrafeSpeed = joy->GetX()-joy->GetZ();
	// Strafing isn't working properly.  Needs fix around this area maybe?

	NormalizeInputs(leftSpeed, rightSpeed, frontStrafeSpeed, rearStrafeSpeed);
	frontLeft->Set(leftSpeed);
	rearLeft->Set(leftSpeed);
	frontRight->Set(rightSpeed);
	rearRight->Set(rightSpeed);
	frontStrafe->Set(frontStrafeSpeed);
	rearStrafe->Set(rearStrafeSpeed);
	SmartDashboard::PutNumber("Front Left Speed", frontLeft->Get());

}

void Drivetrain::NormalizeInputs(float& leftSpeed,float& rightSpeed,float& frontStrafeSpeed,float& rearStrafeSpeed){
	float maxSpeed;
	float signLS, signRS, signFSS, signRSS;
	signLS = leftSpeed/fabs(leftSpeed);
	signRS = rightSpeed/fabs(rightSpeed);
	signFSS = frontStrafeSpeed/fabs(frontStrafeSpeed);
	signRSS = rearStrafeSpeed/fabs(rearStrafeSpeed);

	if(fabs(leftSpeed) > 1 || fabs(rightSpeed) > 1 || fabs(frontStrafeSpeed) > 1 || fabs(rearStrafeSpeed) > 1){

		if(leftSpeed > rightSpeed && leftSpeed > frontStrafeSpeed && leftSpeed > rearStrafeSpeed){
			maxSpeed = leftSpeed;
		}
		else if(rightSpeed > frontStrafeSpeed && rightSpeed > rearStrafeSpeed){
			maxSpeed = rightSpeed;
		}
		else if(frontStrafeSpeed > rearStrafeSpeed){
			maxSpeed = frontStrafeSpeed;
		}
		else {
			maxSpeed = rearStrafeSpeed;
		}

		leftSpeed = fabs(leftSpeed/maxSpeed)*signLS;
		rightSpeed = fabs(rightSpeed/maxSpeed)*signRS;
		frontStrafeSpeed = fabs(frontStrafeSpeed/maxSpeed)*signFSS;
		rearStrafeSpeed = fabs(rearStrafeSpeed/maxSpeed)*signRSS;
	}
}

