// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "Subsystems/Shooter.h"
#include "Subsystems/Intake.h"
#include <vector>
#include "Commands/Auto_Drive.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutonomousCommand.h"
#include "Subsystems/Drivetrain.h"
#include "Subsystems/Pneumatics.h"
#include "Subsystems/Vision.h"
#include "Subsystems/VisionCheck.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"
//#include "TPixy.h"
//#include "PixyI2C.h"

class Robot : public IterativeRobot {
public:
	SendableChooser<Command*> autoChooser;
	std::unique_ptr<Command> autonomousCommand;
	//Command* autonomousCommand;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	static std::shared_ptr<NetworkTable> table;
    static std::shared_ptr<Drivetrain> drivetrain;
    static std::shared_ptr<Pneumatics> pneumatics;
    static std::shared_ptr<Intake> ammo;
    static std::shared_ptr<Shooter> rpg;
    static std::shared_ptr<Vision> vision;
    static std::shared_ptr<VisionCheck> visionCheck;
    std::unique_ptr<Command> gearAutoLeft {new AutoDrive(AutoDrive::Left) };
    std::unique_ptr<Command> gearAutoMiddle {new AutoDrive(AutoDrive::Middle) };
    std::unique_ptr<Command> gearAutoRight {new AutoDrive(AutoDrive::Right) };
  //std::unique_ptr<Command> crossTheStreetMitchel {new AutoForward(.4 , 3) };
    double autoSpeed;
    Robot();
	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();
	virtual void RobotPeriodic();
	void SmartDashboardStuff();
};
#endif
